// Code generated by go-bindata.
// sources:
// resources/app/.floo
// resources/app/.flooignore
// resources/app/audio/bensound-memories.mp3
// resources/app/audio/bensound-memories.ogg
// resources/app/build.sh
// resources/app/client.go
// resources/app/client.js
// resources/app/client.js.map
// resources/app/client.js.sync-conflict-20180218-000313-PKCY7NZ.map
// resources/app/client.sync-conflict-20180218-000313-PKCY7NZ.js
// resources/app/data/audio/bensound-memories.mp3
// resources/app/data/audio/bensound-memories.ogg
// resources/app/data/client.js
// resources/app/data/client.js.map
// resources/app/data/css/font.css
// resources/app/data/css/normalize.css
// resources/app/data/css/player.css
// resources/app/data/css/waves.min.css
// resources/app/data/font/fontello.eot
// resources/app/data/font/fontello.svg
// resources/app/data/font/fontello.ttf
// resources/app/data/font/fontello.woff
// resources/app/data/images/favicon.png
// resources/app/data/img/cover.jpg
// resources/app/data/index.html
// resources/app/data/jquery-3.3.1.min.js
// resources/app/data/js/waves.min.js
// resources/app/data/scripts/index.js
// resources/app/data/scripts/jquery.adaptive-backgrounds.js
// resources/app/data/scripts/player.js
// resources/app/data/scripts/script.js
// resources/app/data/styles/player.css
// resources/app/data/styles/style.css
// resources/app/data/styles/style1.css
// resources/app/font/fontello.eot
// resources/app/font/fontello.svg
// resources/app/font/fontello.ttf
// resources/app/font/fontello.woff
// resources/app/images/favicon.png
// resources/app/index.html
// resources/app/scripts/indexDeprecated.js
// resources/app/scripts/jquery-3.3.1.min.js
// resources/app/scripts/jquery.adaptive-backgrounds.js
// resources/app/scripts/mic.js
// resources/app/scripts/playlist.js
// resources/app/scripts/script.js
// resources/app/scripts/waves.min.js
// resources/app/styles/font.css
// resources/app/styles/normalize.css
// resources/app/styles/player.css
// resources/app/styles/style.css
// resources/app/styles/waves.min.css
// resources/app/winbuild.sh
// DO NOT EDIT!

package main

import (
	"net/http"
	"fmt"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
)

// bindataRead reads the given file from disk. It returns an error on failure.
func bindataRead(path, name string) ([]byte, error) {
	buf, err := ioutil.ReadFile(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset %s at %s: %v", name, path, err)
	}
	return buf, err
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

// resourcesAppFloo reads file data from disk. It returns an error on failure.
func resourcesAppFloo() (*asset, error) {
	path := "C:\\Users\\IanTD\\go\\src\\github.com\\execodeable\\OttoDJ\\resources\\app\\.floo"
	name := "resources/app/.floo"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// resourcesAppFlooignore reads file data from disk. It returns an error on failure.
func resourcesAppFlooignore() (*asset, error) {
	path := "C:\\Users\\IanTD\\go\\src\\github.com\\execodeable\\OttoDJ\\resources\\app\\.flooignore"
	name := "resources/app/.flooignore"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// resourcesAppAudioBensoundMemoriesMp3 reads file data from disk. It returns an error on failure.
func resourcesAppAudioBensoundMemoriesMp3() (*asset, error) {
	path := "C:\\Users\\IanTD\\go\\src\\github.com\\execodeable\\OttoDJ\\resources\\app\\audio\\bensound-memories.mp3"
	name := "resources/app/audio/bensound-memories.mp3"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// resourcesAppAudioBensoundMemoriesOgg reads file data from disk. It returns an error on failure.
func resourcesAppAudioBensoundMemoriesOgg() (*asset, error) {
	path := "C:\\Users\\IanTD\\go\\src\\github.com\\execodeable\\OttoDJ\\resources\\app\\audio\\bensound-memories.ogg"
	name := "resources/app/audio/bensound-memories.ogg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// resourcesAppBuildSh reads file data from disk. It returns an error on failure.
func resourcesAppBuildSh() (*asset, error) {
	path := "C:\\Users\\IanTD\\go\\src\\github.com\\execodeable\\OttoDJ\\resources\\app\\build.sh"
	name := "resources/app/build.sh"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// resourcesAppClientGo reads file data from disk. It returns an error on failure.
func resourcesAppClientGo() (*asset, error) {
	path := "C:\\Users\\IanTD\\go\\src\\github.com\\execodeable\\OttoDJ\\resources\\app\\client.go"
	name := "resources/app/client.go"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// resourcesAppClientJs reads file data from disk. It returns an error on failure.
func resourcesAppClientJs() (*asset, error) {
	path := "C:\\Users\\IanTD\\go\\src\\github.com\\execodeable\\OttoDJ\\resources\\app\\client.js"
	name := "resources/app/client.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// resourcesAppClientJsMap reads file data from disk. It returns an error on failure.
func resourcesAppClientJsMap() (*asset, error) {
	path := "C:\\Users\\IanTD\\go\\src\\github.com\\execodeable\\OttoDJ\\resources\\app\\client.js.map"
	name := "resources/app/client.js.map"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// resourcesAppClientJsSyncConflict20180218000313Pkcy7nzMap reads file data from disk. It returns an error on failure.
func resourcesAppClientJsSyncConflict20180218000313Pkcy7nzMap() (*asset, error) {
	path := "C:\\Users\\IanTD\\go\\src\\github.com\\execodeable\\OttoDJ\\resources\\app\\client.js.sync-conflict-20180218-000313-PKCY7NZ.map"
	name := "resources/app/client.js.sync-conflict-20180218-000313-PKCY7NZ.map"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// resourcesAppClientSyncConflict20180218000313Pkcy7nzJs reads file data from disk. It returns an error on failure.
func resourcesAppClientSyncConflict20180218000313Pkcy7nzJs() (*asset, error) {
	path := "C:\\Users\\IanTD\\go\\src\\github.com\\execodeable\\OttoDJ\\resources\\app\\client.sync-conflict-20180218-000313-PKCY7NZ.js"
	name := "resources/app/client.sync-conflict-20180218-000313-PKCY7NZ.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// resourcesAppDataAudioBensoundMemoriesMp3 reads file data from disk. It returns an error on failure.
func resourcesAppDataAudioBensoundMemoriesMp3() (*asset, error) {
	path := "C:\\Users\\IanTD\\go\\src\\github.com\\execodeable\\OttoDJ\\resources\\app\\data\\audio\\bensound-memories.mp3"
	name := "resources/app/data/audio/bensound-memories.mp3"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// resourcesAppDataAudioBensoundMemoriesOgg reads file data from disk. It returns an error on failure.
func resourcesAppDataAudioBensoundMemoriesOgg() (*asset, error) {
	path := "C:\\Users\\IanTD\\go\\src\\github.com\\execodeable\\OttoDJ\\resources\\app\\data\\audio\\bensound-memories.ogg"
	name := "resources/app/data/audio/bensound-memories.ogg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// resourcesAppDataClientJs reads file data from disk. It returns an error on failure.
func resourcesAppDataClientJs() (*asset, error) {
	path := "C:\\Users\\IanTD\\go\\src\\github.com\\execodeable\\OttoDJ\\resources\\app\\data\\client.js"
	name := "resources/app/data/client.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// resourcesAppDataClientJsMap reads file data from disk. It returns an error on failure.
func resourcesAppDataClientJsMap() (*asset, error) {
	path := "C:\\Users\\IanTD\\go\\src\\github.com\\execodeable\\OttoDJ\\resources\\app\\data\\client.js.map"
	name := "resources/app/data/client.js.map"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// resourcesAppDataCssFontCss reads file data from disk. It returns an error on failure.
func resourcesAppDataCssFontCss() (*asset, error) {
	path := "C:\\Users\\IanTD\\go\\src\\github.com\\execodeable\\OttoDJ\\resources\\app\\data\\css\\font.css"
	name := "resources/app/data/css/font.css"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// resourcesAppDataCssNormalizeCss reads file data from disk. It returns an error on failure.
func resourcesAppDataCssNormalizeCss() (*asset, error) {
	path := "C:\\Users\\IanTD\\go\\src\\github.com\\execodeable\\OttoDJ\\resources\\app\\data\\css\\normalize.css"
	name := "resources/app/data/css/normalize.css"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// resourcesAppDataCssPlayerCss reads file data from disk. It returns an error on failure.
func resourcesAppDataCssPlayerCss() (*asset, error) {
	path := "C:\\Users\\IanTD\\go\\src\\github.com\\execodeable\\OttoDJ\\resources\\app\\data\\css\\player.css"
	name := "resources/app/data/css/player.css"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// resourcesAppDataCssWavesMinCss reads file data from disk. It returns an error on failure.
func resourcesAppDataCssWavesMinCss() (*asset, error) {
	path := "C:\\Users\\IanTD\\go\\src\\github.com\\execodeable\\OttoDJ\\resources\\app\\data\\css\\waves.min.css"
	name := "resources/app/data/css/waves.min.css"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// resourcesAppDataFontFontelloEot reads file data from disk. It returns an error on failure.
func resourcesAppDataFontFontelloEot() (*asset, error) {
	path := "C:\\Users\\IanTD\\go\\src\\github.com\\execodeable\\OttoDJ\\resources\\app\\data\\font\\fontello.eot"
	name := "resources/app/data/font/fontello.eot"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// resourcesAppDataFontFontelloSvg reads file data from disk. It returns an error on failure.
func resourcesAppDataFontFontelloSvg() (*asset, error) {
	path := "C:\\Users\\IanTD\\go\\src\\github.com\\execodeable\\OttoDJ\\resources\\app\\data\\font\\fontello.svg"
	name := "resources/app/data/font/fontello.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// resourcesAppDataFontFontelloTtf reads file data from disk. It returns an error on failure.
func resourcesAppDataFontFontelloTtf() (*asset, error) {
	path := "C:\\Users\\IanTD\\go\\src\\github.com\\execodeable\\OttoDJ\\resources\\app\\data\\font\\fontello.ttf"
	name := "resources/app/data/font/fontello.ttf"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// resourcesAppDataFontFontelloWoff reads file data from disk. It returns an error on failure.
func resourcesAppDataFontFontelloWoff() (*asset, error) {
	path := "C:\\Users\\IanTD\\go\\src\\github.com\\execodeable\\OttoDJ\\resources\\app\\data\\font\\fontello.woff"
	name := "resources/app/data/font/fontello.woff"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// resourcesAppDataImagesFaviconPng reads file data from disk. It returns an error on failure.
func resourcesAppDataImagesFaviconPng() (*asset, error) {
	path := "C:\\Users\\IanTD\\go\\src\\github.com\\execodeable\\OttoDJ\\resources\\app\\data\\images\\favicon.png"
	name := "resources/app/data/images/favicon.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// resourcesAppDataImgCoverJpg reads file data from disk. It returns an error on failure.
func resourcesAppDataImgCoverJpg() (*asset, error) {
	path := "C:\\Users\\IanTD\\go\\src\\github.com\\execodeable\\OttoDJ\\resources\\app\\data\\img\\cover.jpg"
	name := "resources/app/data/img/cover.jpg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// resourcesAppDataIndexHtml reads file data from disk. It returns an error on failure.
func resourcesAppDataIndexHtml() (*asset, error) {
	path := "C:\\Users\\IanTD\\go\\src\\github.com\\execodeable\\OttoDJ\\resources\\app\\data\\index.html"
	name := "resources/app/data/index.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// resourcesAppDataJquery331MinJs reads file data from disk. It returns an error on failure.
func resourcesAppDataJquery331MinJs() (*asset, error) {
	path := "C:\\Users\\IanTD\\go\\src\\github.com\\execodeable\\OttoDJ\\resources\\app\\data\\jquery-3.3.1.min.js"
	name := "resources/app/data/jquery-3.3.1.min.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// resourcesAppDataJsWavesMinJs reads file data from disk. It returns an error on failure.
func resourcesAppDataJsWavesMinJs() (*asset, error) {
	path := "C:\\Users\\IanTD\\go\\src\\github.com\\execodeable\\OttoDJ\\resources\\app\\data\\js\\waves.min.js"
	name := "resources/app/data/js/waves.min.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// resourcesAppDataScriptsIndexJs reads file data from disk. It returns an error on failure.
func resourcesAppDataScriptsIndexJs() (*asset, error) {
	path := "C:\\Users\\IanTD\\go\\src\\github.com\\execodeable\\OttoDJ\\resources\\app\\data\\scripts\\index.js"
	name := "resources/app/data/scripts/index.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// resourcesAppDataScriptsJqueryAdaptiveBackgroundsJs reads file data from disk. It returns an error on failure.
func resourcesAppDataScriptsJqueryAdaptiveBackgroundsJs() (*asset, error) {
	path := "C:\\Users\\IanTD\\go\\src\\github.com\\execodeable\\OttoDJ\\resources\\app\\data\\scripts\\jquery.adaptive-backgrounds.js"
	name := "resources/app/data/scripts/jquery.adaptive-backgrounds.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// resourcesAppDataScriptsPlayerJs reads file data from disk. It returns an error on failure.
func resourcesAppDataScriptsPlayerJs() (*asset, error) {
	path := "C:\\Users\\IanTD\\go\\src\\github.com\\execodeable\\OttoDJ\\resources\\app\\data\\scripts\\player.js"
	name := "resources/app/data/scripts/player.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// resourcesAppDataScriptsScriptJs reads file data from disk. It returns an error on failure.
func resourcesAppDataScriptsScriptJs() (*asset, error) {
	path := "C:\\Users\\IanTD\\go\\src\\github.com\\execodeable\\OttoDJ\\resources\\app\\data\\scripts\\script.js"
	name := "resources/app/data/scripts/script.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// resourcesAppDataStylesPlayerCss reads file data from disk. It returns an error on failure.
func resourcesAppDataStylesPlayerCss() (*asset, error) {
	path := "C:\\Users\\IanTD\\go\\src\\github.com\\execodeable\\OttoDJ\\resources\\app\\data\\styles\\player.css"
	name := "resources/app/data/styles/player.css"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// resourcesAppDataStylesStyleCss reads file data from disk. It returns an error on failure.
func resourcesAppDataStylesStyleCss() (*asset, error) {
	path := "C:\\Users\\IanTD\\go\\src\\github.com\\execodeable\\OttoDJ\\resources\\app\\data\\styles\\style.css"
	name := "resources/app/data/styles/style.css"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// resourcesAppDataStylesStyle1Css reads file data from disk. It returns an error on failure.
func resourcesAppDataStylesStyle1Css() (*asset, error) {
	path := "C:\\Users\\IanTD\\go\\src\\github.com\\execodeable\\OttoDJ\\resources\\app\\data\\styles\\style1.css"
	name := "resources/app/data/styles/style1.css"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// resourcesAppFontFontelloEot reads file data from disk. It returns an error on failure.
func resourcesAppFontFontelloEot() (*asset, error) {
	path := "C:\\Users\\IanTD\\go\\src\\github.com\\execodeable\\OttoDJ\\resources\\app\\font\\fontello.eot"
	name := "resources/app/font/fontello.eot"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// resourcesAppFontFontelloSvg reads file data from disk. It returns an error on failure.
func resourcesAppFontFontelloSvg() (*asset, error) {
	path := "C:\\Users\\IanTD\\go\\src\\github.com\\execodeable\\OttoDJ\\resources\\app\\font\\fontello.svg"
	name := "resources/app/font/fontello.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// resourcesAppFontFontelloTtf reads file data from disk. It returns an error on failure.
func resourcesAppFontFontelloTtf() (*asset, error) {
	path := "C:\\Users\\IanTD\\go\\src\\github.com\\execodeable\\OttoDJ\\resources\\app\\font\\fontello.ttf"
	name := "resources/app/font/fontello.ttf"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// resourcesAppFontFontelloWoff reads file data from disk. It returns an error on failure.
func resourcesAppFontFontelloWoff() (*asset, error) {
	path := "C:\\Users\\IanTD\\go\\src\\github.com\\execodeable\\OttoDJ\\resources\\app\\font\\fontello.woff"
	name := "resources/app/font/fontello.woff"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// resourcesAppImagesFaviconPng reads file data from disk. It returns an error on failure.
func resourcesAppImagesFaviconPng() (*asset, error) {
	path := "C:\\Users\\IanTD\\go\\src\\github.com\\execodeable\\OttoDJ\\resources\\app\\images\\favicon.png"
	name := "resources/app/images/favicon.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// resourcesAppIndexHtml reads file data from disk. It returns an error on failure.
func resourcesAppIndexHtml() (*asset, error) {
	path := "C:\\Users\\IanTD\\go\\src\\github.com\\execodeable\\OttoDJ\\resources\\app\\index.html"
	name := "resources/app/index.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// resourcesAppScriptsIndexdeprecatedJs reads file data from disk. It returns an error on failure.
func resourcesAppScriptsIndexdeprecatedJs() (*asset, error) {
	path := "C:\\Users\\IanTD\\go\\src\\github.com\\execodeable\\OttoDJ\\resources\\app\\scripts\\indexDeprecated.js"
	name := "resources/app/scripts/indexDeprecated.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// resourcesAppScriptsJquery331MinJs reads file data from disk. It returns an error on failure.
func resourcesAppScriptsJquery331MinJs() (*asset, error) {
	path := "C:\\Users\\IanTD\\go\\src\\github.com\\execodeable\\OttoDJ\\resources\\app\\scripts\\jquery-3.3.1.min.js"
	name := "resources/app/scripts/jquery-3.3.1.min.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// resourcesAppScriptsJqueryAdaptiveBackgroundsJs reads file data from disk. It returns an error on failure.
func resourcesAppScriptsJqueryAdaptiveBackgroundsJs() (*asset, error) {
	path := "C:\\Users\\IanTD\\go\\src\\github.com\\execodeable\\OttoDJ\\resources\\app\\scripts\\jquery.adaptive-backgrounds.js"
	name := "resources/app/scripts/jquery.adaptive-backgrounds.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// resourcesAppScriptsMicJs reads file data from disk. It returns an error on failure.
func resourcesAppScriptsMicJs() (*asset, error) {
	path := "C:\\Users\\IanTD\\go\\src\\github.com\\execodeable\\OttoDJ\\resources\\app\\scripts\\mic.js"
	name := "resources/app/scripts/mic.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// resourcesAppScriptsPlaylistJs reads file data from disk. It returns an error on failure.
func resourcesAppScriptsPlaylistJs() (*asset, error) {
	path := "C:\\Users\\IanTD\\go\\src\\github.com\\execodeable\\OttoDJ\\resources\\app\\scripts\\playlist.js"
	name := "resources/app/scripts/playlist.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// resourcesAppScriptsScriptJs reads file data from disk. It returns an error on failure.
func resourcesAppScriptsScriptJs() (*asset, error) {
	path := "C:\\Users\\IanTD\\go\\src\\github.com\\execodeable\\OttoDJ\\resources\\app\\scripts\\script.js"
	name := "resources/app/scripts/script.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// resourcesAppScriptsWavesMinJs reads file data from disk. It returns an error on failure.
func resourcesAppScriptsWavesMinJs() (*asset, error) {
	path := "C:\\Users\\IanTD\\go\\src\\github.com\\execodeable\\OttoDJ\\resources\\app\\scripts\\waves.min.js"
	name := "resources/app/scripts/waves.min.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// resourcesAppStylesFontCss reads file data from disk. It returns an error on failure.
func resourcesAppStylesFontCss() (*asset, error) {
	path := "C:\\Users\\IanTD\\go\\src\\github.com\\execodeable\\OttoDJ\\resources\\app\\styles\\font.css"
	name := "resources/app/styles/font.css"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// resourcesAppStylesNormalizeCss reads file data from disk. It returns an error on failure.
func resourcesAppStylesNormalizeCss() (*asset, error) {
	path := "C:\\Users\\IanTD\\go\\src\\github.com\\execodeable\\OttoDJ\\resources\\app\\styles\\normalize.css"
	name := "resources/app/styles/normalize.css"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// resourcesAppStylesPlayerCss reads file data from disk. It returns an error on failure.
func resourcesAppStylesPlayerCss() (*asset, error) {
	path := "C:\\Users\\IanTD\\go\\src\\github.com\\execodeable\\OttoDJ\\resources\\app\\styles\\player.css"
	name := "resources/app/styles/player.css"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// resourcesAppStylesStyleCss reads file data from disk. It returns an error on failure.
func resourcesAppStylesStyleCss() (*asset, error) {
	path := "C:\\Users\\IanTD\\go\\src\\github.com\\execodeable\\OttoDJ\\resources\\app\\styles\\style.css"
	name := "resources/app/styles/style.css"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// resourcesAppStylesWavesMinCss reads file data from disk. It returns an error on failure.
func resourcesAppStylesWavesMinCss() (*asset, error) {
	path := "C:\\Users\\IanTD\\go\\src\\github.com\\execodeable\\OttoDJ\\resources\\app\\styles\\waves.min.css"
	name := "resources/app/styles/waves.min.css"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// resourcesAppWinbuildSh reads file data from disk. It returns an error on failure.
func resourcesAppWinbuildSh() (*asset, error) {
	path := "C:\\Users\\IanTD\\go\\src\\github.com\\execodeable\\OttoDJ\\resources\\app\\winbuild.sh"
	name := "resources/app/winbuild.sh"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"resources/app/.floo": resourcesAppFloo,
	"resources/app/.flooignore": resourcesAppFlooignore,
	"resources/app/audio/bensound-memories.mp3": resourcesAppAudioBensoundMemoriesMp3,
	"resources/app/audio/bensound-memories.ogg": resourcesAppAudioBensoundMemoriesOgg,
	"resources/app/build.sh": resourcesAppBuildSh,
	"resources/app/client.go": resourcesAppClientGo,
	"resources/app/client.js": resourcesAppClientJs,
	"resources/app/client.js.map": resourcesAppClientJsMap,
	"resources/app/client.js.sync-conflict-20180218-000313-PKCY7NZ.map": resourcesAppClientJsSyncConflict20180218000313Pkcy7nzMap,
	"resources/app/client.sync-conflict-20180218-000313-PKCY7NZ.js": resourcesAppClientSyncConflict20180218000313Pkcy7nzJs,
	"resources/app/data/audio/bensound-memories.mp3": resourcesAppDataAudioBensoundMemoriesMp3,
	"resources/app/data/audio/bensound-memories.ogg": resourcesAppDataAudioBensoundMemoriesOgg,
	"resources/app/data/client.js": resourcesAppDataClientJs,
	"resources/app/data/client.js.map": resourcesAppDataClientJsMap,
	"resources/app/data/css/font.css": resourcesAppDataCssFontCss,
	"resources/app/data/css/normalize.css": resourcesAppDataCssNormalizeCss,
	"resources/app/data/css/player.css": resourcesAppDataCssPlayerCss,
	"resources/app/data/css/waves.min.css": resourcesAppDataCssWavesMinCss,
	"resources/app/data/font/fontello.eot": resourcesAppDataFontFontelloEot,
	"resources/app/data/font/fontello.svg": resourcesAppDataFontFontelloSvg,
	"resources/app/data/font/fontello.ttf": resourcesAppDataFontFontelloTtf,
	"resources/app/data/font/fontello.woff": resourcesAppDataFontFontelloWoff,
	"resources/app/data/images/favicon.png": resourcesAppDataImagesFaviconPng,
	"resources/app/data/img/cover.jpg": resourcesAppDataImgCoverJpg,
	"resources/app/data/index.html": resourcesAppDataIndexHtml,
	"resources/app/data/jquery-3.3.1.min.js": resourcesAppDataJquery331MinJs,
	"resources/app/data/js/waves.min.js": resourcesAppDataJsWavesMinJs,
	"resources/app/data/scripts/index.js": resourcesAppDataScriptsIndexJs,
	"resources/app/data/scripts/jquery.adaptive-backgrounds.js": resourcesAppDataScriptsJqueryAdaptiveBackgroundsJs,
	"resources/app/data/scripts/player.js": resourcesAppDataScriptsPlayerJs,
	"resources/app/data/scripts/script.js": resourcesAppDataScriptsScriptJs,
	"resources/app/data/styles/player.css": resourcesAppDataStylesPlayerCss,
	"resources/app/data/styles/style.css": resourcesAppDataStylesStyleCss,
	"resources/app/data/styles/style1.css": resourcesAppDataStylesStyle1Css,
	"resources/app/font/fontello.eot": resourcesAppFontFontelloEot,
	"resources/app/font/fontello.svg": resourcesAppFontFontelloSvg,
	"resources/app/font/fontello.ttf": resourcesAppFontFontelloTtf,
	"resources/app/font/fontello.woff": resourcesAppFontFontelloWoff,
	"resources/app/images/favicon.png": resourcesAppImagesFaviconPng,
	"resources/app/index.html": resourcesAppIndexHtml,
	"resources/app/scripts/indexDeprecated.js": resourcesAppScriptsIndexdeprecatedJs,
	"resources/app/scripts/jquery-3.3.1.min.js": resourcesAppScriptsJquery331MinJs,
	"resources/app/scripts/jquery.adaptive-backgrounds.js": resourcesAppScriptsJqueryAdaptiveBackgroundsJs,
	"resources/app/scripts/mic.js": resourcesAppScriptsMicJs,
	"resources/app/scripts/playlist.js": resourcesAppScriptsPlaylistJs,
	"resources/app/scripts/script.js": resourcesAppScriptsScriptJs,
	"resources/app/scripts/waves.min.js": resourcesAppScriptsWavesMinJs,
	"resources/app/styles/font.css": resourcesAppStylesFontCss,
	"resources/app/styles/normalize.css": resourcesAppStylesNormalizeCss,
	"resources/app/styles/player.css": resourcesAppStylesPlayerCss,
	"resources/app/styles/style.css": resourcesAppStylesStyleCss,
	"resources/app/styles/waves.min.css": resourcesAppStylesWavesMinCss,
	"resources/app/winbuild.sh": resourcesAppWinbuildSh,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"resources": &bintree{nil, map[string]*bintree{
		"app": &bintree{nil, map[string]*bintree{
			".floo": &bintree{resourcesAppFloo, map[string]*bintree{}},
			".flooignore": &bintree{resourcesAppFlooignore, map[string]*bintree{}},
			"audio": &bintree{nil, map[string]*bintree{
				"bensound-memories.mp3": &bintree{resourcesAppAudioBensoundMemoriesMp3, map[string]*bintree{}},
				"bensound-memories.ogg": &bintree{resourcesAppAudioBensoundMemoriesOgg, map[string]*bintree{}},
			}},
			"build.sh": &bintree{resourcesAppBuildSh, map[string]*bintree{}},
			"client.go": &bintree{resourcesAppClientGo, map[string]*bintree{}},
			"client.js": &bintree{resourcesAppClientJs, map[string]*bintree{}},
			"client.js.map": &bintree{resourcesAppClientJsMap, map[string]*bintree{}},
			"client.js.sync-conflict-20180218-000313-PKCY7NZ.map": &bintree{resourcesAppClientJsSyncConflict20180218000313Pkcy7nzMap, map[string]*bintree{}},
			"client.sync-conflict-20180218-000313-PKCY7NZ.js": &bintree{resourcesAppClientSyncConflict20180218000313Pkcy7nzJs, map[string]*bintree{}},
			"data": &bintree{nil, map[string]*bintree{
				"audio": &bintree{nil, map[string]*bintree{
					"bensound-memories.mp3": &bintree{resourcesAppDataAudioBensoundMemoriesMp3, map[string]*bintree{}},
					"bensound-memories.ogg": &bintree{resourcesAppDataAudioBensoundMemoriesOgg, map[string]*bintree{}},
				}},
				"client.js": &bintree{resourcesAppDataClientJs, map[string]*bintree{}},
				"client.js.map": &bintree{resourcesAppDataClientJsMap, map[string]*bintree{}},
				"css": &bintree{nil, map[string]*bintree{
					"font.css": &bintree{resourcesAppDataCssFontCss, map[string]*bintree{}},
					"normalize.css": &bintree{resourcesAppDataCssNormalizeCss, map[string]*bintree{}},
					"player.css": &bintree{resourcesAppDataCssPlayerCss, map[string]*bintree{}},
					"waves.min.css": &bintree{resourcesAppDataCssWavesMinCss, map[string]*bintree{}},
				}},
				"font": &bintree{nil, map[string]*bintree{
					"fontello.eot": &bintree{resourcesAppDataFontFontelloEot, map[string]*bintree{}},
					"fontello.svg": &bintree{resourcesAppDataFontFontelloSvg, map[string]*bintree{}},
					"fontello.ttf": &bintree{resourcesAppDataFontFontelloTtf, map[string]*bintree{}},
					"fontello.woff": &bintree{resourcesAppDataFontFontelloWoff, map[string]*bintree{}},
				}},
				"images": &bintree{nil, map[string]*bintree{
					"favicon.png": &bintree{resourcesAppDataImagesFaviconPng, map[string]*bintree{}},
				}},
				"img": &bintree{nil, map[string]*bintree{
					"cover.jpg": &bintree{resourcesAppDataImgCoverJpg, map[string]*bintree{}},
				}},
				"index.html": &bintree{resourcesAppDataIndexHtml, map[string]*bintree{}},
				"jquery-3.3.1.min.js": &bintree{resourcesAppDataJquery331MinJs, map[string]*bintree{}},
				"js": &bintree{nil, map[string]*bintree{
					"waves.min.js": &bintree{resourcesAppDataJsWavesMinJs, map[string]*bintree{}},
				}},
				"scripts": &bintree{nil, map[string]*bintree{
					"index.js": &bintree{resourcesAppDataScriptsIndexJs, map[string]*bintree{}},
					"jquery.adaptive-backgrounds.js": &bintree{resourcesAppDataScriptsJqueryAdaptiveBackgroundsJs, map[string]*bintree{}},
					"player.js": &bintree{resourcesAppDataScriptsPlayerJs, map[string]*bintree{}},
					"script.js": &bintree{resourcesAppDataScriptsScriptJs, map[string]*bintree{}},
				}},
				"styles": &bintree{nil, map[string]*bintree{
					"player.css": &bintree{resourcesAppDataStylesPlayerCss, map[string]*bintree{}},
					"style.css": &bintree{resourcesAppDataStylesStyleCss, map[string]*bintree{}},
					"style1.css": &bintree{resourcesAppDataStylesStyle1Css, map[string]*bintree{}},
				}},
			}},
			"font": &bintree{nil, map[string]*bintree{
				"fontello.eot": &bintree{resourcesAppFontFontelloEot, map[string]*bintree{}},
				"fontello.svg": &bintree{resourcesAppFontFontelloSvg, map[string]*bintree{}},
				"fontello.ttf": &bintree{resourcesAppFontFontelloTtf, map[string]*bintree{}},
				"fontello.woff": &bintree{resourcesAppFontFontelloWoff, map[string]*bintree{}},
			}},
			"images": &bintree{nil, map[string]*bintree{
				"favicon.png": &bintree{resourcesAppImagesFaviconPng, map[string]*bintree{}},
			}},
			"index.html": &bintree{resourcesAppIndexHtml, map[string]*bintree{}},
			"scripts": &bintree{nil, map[string]*bintree{
				"indexDeprecated.js": &bintree{resourcesAppScriptsIndexdeprecatedJs, map[string]*bintree{}},
				"jquery-3.3.1.min.js": &bintree{resourcesAppScriptsJquery331MinJs, map[string]*bintree{}},
				"jquery.adaptive-backgrounds.js": &bintree{resourcesAppScriptsJqueryAdaptiveBackgroundsJs, map[string]*bintree{}},
				"mic.js": &bintree{resourcesAppScriptsMicJs, map[string]*bintree{}},
				"playlist.js": &bintree{resourcesAppScriptsPlaylistJs, map[string]*bintree{}},
				"script.js": &bintree{resourcesAppScriptsScriptJs, map[string]*bintree{}},
				"waves.min.js": &bintree{resourcesAppScriptsWavesMinJs, map[string]*bintree{}},
			}},
			"styles": &bintree{nil, map[string]*bintree{
				"font.css": &bintree{resourcesAppStylesFontCss, map[string]*bintree{}},
				"normalize.css": &bintree{resourcesAppStylesNormalizeCss, map[string]*bintree{}},
				"player.css": &bintree{resourcesAppStylesPlayerCss, map[string]*bintree{}},
				"style.css": &bintree{resourcesAppStylesStyleCss, map[string]*bintree{}},
				"waves.min.css": &bintree{resourcesAppStylesWavesMinCss, map[string]*bintree{}},
			}},
			"winbuild.sh": &bintree{resourcesAppWinbuildSh, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


func assetFS() http.FileSystem {
	for k := range _bintree.Children {
		return http.Dir(k)
	}
	panic("unreachable")
}
